dist: trusty
sudo: true

notifications:
  email: false

language: generic

env:
  global:
    - INSTALL_PREFIX=$HOME/.local
    - PATH=/usr/lib/ccache:$PATH

cache:
  directories:
    - $HOME/.ccache

matrix:
  include:
    # GCC 7
    - env: CC=gcc-7 CXX=g++-7 BUILD_TYPE=Debug
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-7-dev", "libboost1.67-all-dev" , "gcc-7", "g++-7" ]
      } }

    # GCC 8
    - env: CC=gcc-8 CXX=g++-8 BUILD_TYPE=Debug
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "gcc-8", "g++-8" ]
      } }

    # Clang 7
    - env: CC=clang-7 CXX=clang++-7 BUILD_TYPE=Debug
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "clang-7", "libomp-7-dev" ]
      } }

    # Debug
    - env: CC=clang-7 CXX=clang++-7 BUILD_TYPE=Debug
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "clang-7", "libomp-7-dev" ]
      } }

    # MinSizeRel
    - env: CC=clang-7 CXX=clang++-7 BUILD_TYPE=MinSizeRel
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "clang-7", "libomp-7-dev" ]
      } }

    # RelWithDebInfo
    - env: CC=clang-7 CXX=clang++-7 BUILD_TYPE=RelWithDebInfo
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "clang-7", "libomp-7-dev" ]
      } }

    # Release
    - env: CC=clang-7 CXX=clang++-7 BUILD_TYPE=Release
      addons: { apt: { 
        sources: [ "ubuntu-toolchain-r-test", "llvm-toolchain-trusty-7", { sourceline: "ppa:dluxen/boost" }, { sourceline: "ppa:dzombie/ccache" } ],
        packages: [ "libmpich-dev", "libnetcdf-dev", "libvtk6-dev", "lynx", "ccache", "libstdc++-8-dev", "libboost1.67-all-dev", "clang-7", "libomp-7-dev" ]
      } }

install:
  # latest cmake is required for latest boost libraries
  - echo $PATH
  - echo $PWD
  - >
    if [ ! -d "${INSTALL_PREFIX}" ]; then 
        mkdir "${INSTALL_PREFIX}";
    fi;
    
    lynx -listonly -dump https://cmake.org/files/LatestRelease/ |
      awk '/^[ ]*[1-9][0-9]*\./{sub("^ [^.]*.[ ]*","",$0); print;}' |
      grep '.*\/cmake-[0-9]*\.[0-9]*\.[0-9]*-Linux-x86_64\.tar\.gz' |
      tail -n 1 |
      xargs curl -s |
      tar -x -z --strip-components 1 -C "${INSTALL_PREFIX}"
  # Fix CMake errors of VTK 6.0 with newer GCC revisions
  - >
    curl -s "https://gist.githubusercontent.com/JM1/c5adad1a1e9266e934e3fec6fd72149f/raw/f644041810c25e1d72f22d2b0aa71c16bb253da9/vtk-6.0_GenerateExportHeader.cmake.patch" |
      sudo patch /usr/lib/cmake/vtk-6.0/GenerateExportHeader.cmake
  # Fix "make[2]: *** No rule to make target `/usr/lib/libpq.so', needed by `...'.  Stop."
  - sudo ln -s /usr/lib/x86_64-linux-gnu/libpq.so /usr/lib/libpq.so

before_script:
  # ccache symlinks are created in "before_script:" section because they are lost after "install:" section
  # manually add symlinks to versioned clang because of https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867705
  - >
    sudo update-ccache-symlinks &&
    for cc in /usr/bin/clang-[0-9\.]* /usr/bin/clang++-[0-9\.]* ; do
        if [ -e "$cc" ]; then
          lnk=$(basename "$cc");
          if [ ! -e "/usr/lib/ccache/$lnk" ]; then
            sudo ln -s /usr/bin/ccache "/usr/lib/ccache/$lnk";
          fi;
        fi;
    done
  - nproc
  - echo `which $CC`
  - echo `which $CXX`
  - cmake --version
  - ctest --version

  - >
    git clone --depth 1 https://github.com/JM1/hbrs-cmake.git &&
    cd hbrs-cmake &&
    mkdir build && cd build/ &&
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} "-DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}" .. &&
    make -j$(nproc) install &&
    cd ../ && rm -rf build/ &&
    cd ../ && rm -rf hbrs-cmake/

  - >
    git clone --depth 1 https://github.com/JM1/hbrs-mpl.git &&
    cd hbrs-mpl &&
    mkdir build && cd build/ &&
    export CXXFLAGS="-I${INSTALL_PREFIX}/include" &&
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} "-DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}" \
      -DMPI_C_COMPILER=/usr/bin/mpicc.mpich -DMPI_CXX_COMPILER=/usr/bin/mpicxx.mpich \
      -DHBRS_MPL_ENABLE_TESTS=OFF -DHBRS_MPL_ENABLE_BENCHMARKS=OFF -DHBRS_MPL_ENABLE_ELEMENTAL=OFF -DHBRS_MPL_ENABLE_MATLAB=OFF .. &&
    make -j$(nproc) install &&
    cd ../ && rm -rf build/ &&
    cd ../ && rm -rf hbrs-mpl/

script:
  - ccache -s
  - >
    mkdir build && cd build &&
    export CXXFLAGS="-I${INSTALL_PREFIX}/include" &&
    (
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} "-DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}" \
        -DMPI_C_COMPILER=/usr/bin/mpicc.mpich -DMPI_CXX_COMPILER=/usr/bin/mpicxx.mpich \
        -DHBRS_THETA_UTILS_ENABLE_TESTS=ON .. ||
          (cat CMakeFiles/CMakeError.log; travis_terminate 1)
    ) &&
    make -j$(nproc) &&
    ctest --output-on-failure &&
    ccache -s &&
    make install
